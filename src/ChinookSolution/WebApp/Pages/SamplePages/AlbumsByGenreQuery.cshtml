@page "{GenreId?}"
@model WebApp.Pages.SamplePages.AlbumsByGenreQueryModel
@{
	ViewData["Title"] = "albums by genre";
}
<h1>Albums By Genre</h1>

@section CustomCSS{
	<partial name ="_MyCustomCSS" />
}

<section class="setflex">
	<div class="onehalf">
		<blockquote>
			This page is to demonstrate:
			<ul>
				<li>Use of the select tag</li>
				<li>use of imput/datalist tags</li>
				<li>table creation</li>
				<li>paging</li>
				<li>Customizing</li>
			</ul>

		</blockquote>

		@if(Model.HasFeedBack)
		{
			<p>Model.FeedBack</p>
		}

		@if(Model.HasErrorMsg)
		{
			<p style="color:firebrick; font-weight:bold;">@Model.ErrorMsg</p>
		}

		<form method="post">
			<label>
				Select Genre to view albums
				<select asp-for="GenreId">
					<option value="0">select genre...</option>
					@foreach(var item in Model.GenreList)
					{
						if (Model.GenreId == item.ValueId)
						{
							<option value="@item.ValueId" selected>@item.DisplayText</option>

						}
						else
						{
							<option value="@item.ValueId">@item.DisplayText</option>
						}
					}
				</select>
			</label>
			<br />
			<button type="submit">Find Albums</button>
			&nbsp;&nbsp;
			<button type="submit" asp-page-handler="New">New Album</button>
		</form>
	</div>
	<div class="onehalf">
	@*do not put out anything unless there ius something to show*@	
	@if(Model.AlbumsByGenre != null)
		{
			@*you have atleast an instance of your collection*@
			if(Model.AlbumsByGenre.Count() == 0)
			{
				<p style="color:blue; font-weight:bold;">This genre has no tracks on any album on file</p>
			}
			else
			{
				@*otherwise you have rows to display*@
				<table border="1">
					<thead>
						<tr>			
							<th>Title</th>
							<th>Year</th>
							<th>Label</th>
							<th>Artist</th>
						</tr>
					</thead>
					<tbody>
						@foreach(var item in Model.AlbumsByGenre)
						{
							@*The title cell text will act as a link to transfer 
									to the CRUD page for ALbum maintenance
								The href uses the full relative path to thr referenced page
								the pkey value is attatched to the path name
							*@
							<tr>
								<td>
									<a href="/SamplePages/CRUDAlbum/@item.AlbumId">
									@item.Title</a></td>
								<td>@item.ReleaseYear</td>
								<td>@item.ReleaseLabel</td>
								<td>@item.ArtistName</td>
							</tr>
						}
					</tbody>
					<tfoot>
						@*code to implement paging on our query using the paginator*@
						<tr colspan="4">
							<td>
								@{
									foreach(var pageRef in Model.Pager)
									{
										if(pageRef == Model.Pager.CurrentPage)
										{
											//bold the current page number
											<b>@pageRef.Text</b>
										}
										else
										{
											//setup the remaining page lements as l;inks 
											//	to cause the query to refresh for the
											//	DESIRED PAGE
											<a title="Page @pageRef.Page"
												asp-page="/SamplePages/AlbumsByGenreQuery"
												asp-route-currentPage="@pageRef.Page">
												@pageRef.Text</a>
										}
									}
								}
							</td>
						</tr>
					</tfoot>
				</table>
			}
		}
	</div>
</section>

